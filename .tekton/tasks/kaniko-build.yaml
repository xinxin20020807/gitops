apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kaniko-build
  labels:
    app.kubernetes.io/version: "1.0.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.38.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: "kaniko,build,push,docker"
    tekton.dev/displayName: "Kaniko Build"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >
    Build and push container images using Kaniko.
    No Docker daemon required.

  params:
    - name: IMAGE
      description: "Image name and tag to build and push"
      type: string
    - name: DOCKERFILE
      description: "Path to the Dockerfile"
      type: string
      default: "./Dockerfile"
    - name: CONTEXT
      description: "Build context directory"
      type: string
      default: "./"
    - name: BUILDER_IMAGE
      description: "Kaniko executor image"
      type: string
      default: "gcr.io/kaniko-project/executor:v1.15.0"
    - name: CACHE
      description: "Enable layer caching"
      type: string
      default: "true"
    - name: VERBOSITY
      description: "Log verbosity level"
      type: string
      default: "info"
    - name: BUILD_ARGS
      description: "Build arguments (comma-separated key=value pairs)"
      type: string
      default: ""

  workspaces:
    - name: source
      description: "Workspace containing the source code and Dockerfile"
    - name: dockerconfig
      description: "Docker configuration for authentication"
      optional: true
      mountPath: /kaniko/.docker

  results:
    - name: IMAGE_DIGEST
      description: "Digest of the image just built"
    - name: IMAGE_URL
      description: "URL of the image just built"
    - name: IMAGE_SIZE
      description: "Size of the image just built"

  steps:
    - name: build-and-push
      image: $(params.BUILDER_IMAGE)
      env:
        - name: DOCKER_CONFIG
          value: /kaniko/.docker
        - name: IMAGE
          value: $(params.IMAGE)
        - name: DOCKERFILE
          value: $(params.DOCKERFILE)
        - name: CONTEXT
          value: $(params.CONTEXT)
        - name: CACHE
          value: $(params.CACHE)
        - name: VERBOSITY
          value: $(params.VERBOSITY)
        - name: BUILD_ARGS
          value: $(params.BUILD_ARGS)
        - name: WORKSPACE_SOURCE_PATH
          value: $(workspaces.source.path)
      script: |
        #!/busybox/sh
        set -e

        cd "${WORKSPACE_SOURCE_PATH}"

        echo "Building and pushing image: ${IMAGE}"
        echo "Dockerfile: ${DOCKERFILE}"
        echo "Context: ${CONTEXT}"
        echo "Working directory: $(pwd)"

        # Verify Dockerfile exists
        if [ ! -f "${DOCKERFILE}" ]; then
          echo "Error: Dockerfile not found at ${DOCKERFILE}"
          ls -la "${CONTEXT}" || true
          exit 1
        fi

        # Prepare kaniko arguments
        KANIKO_ARGS="--dockerfile=${DOCKERFILE} --context=${CONTEXT} --destination=${IMAGE} --verbosity=${VERBOSITY}"

        # Configure caching
        if [ "${CACHE}" = "true" ]; then
          KANIKO_ARGS="${KANIKO_ARGS} --cache=true"
        else
          KANIKO_ARGS="${KANIKO_ARGS} --cache=false"
        fi

        # Add build arguments if provided
        if [ -n "${BUILD_ARGS}" ]; then
          # Split comma-separated build args
          echo "${BUILD_ARGS}" | tr ',' '\n' | while read -r arg; do
            if [ -n "${arg}" ]; then
              KANIKO_ARGS="${KANIKO_ARGS} --build-arg=${arg}"
            fi
          done
        fi

        echo "Kaniko arguments: ${KANIKO_ARGS}"

        # Check authentication
        if [ -f "/kaniko/.docker/config.json" ]; then
          echo "Docker authentication configured"
        else
          echo "Warning: No Docker authentication found"
        fi

        # Execute build and push
        echo "Starting Kaniko build and push..."
        /kaniko/executor ${KANIKO_ARGS} 2>&1 | tee /tmp/kaniko.log

        # Extract results from output
        IMAGE_DIGEST="unknown"
        IMAGE_SIZE="unknown"

        if grep -q "digest:" /tmp/kaniko.log; then
          IMAGE_DIGEST=$(grep "digest:" /tmp/kaniko.log | tail -1 | sed 's/.*digest: //' | tr -d '\r\n')
        fi

        if grep -q "Pushed" /tmp/kaniko.log; then
          IMAGE_SIZE=$(grep "Pushed" /tmp/kaniko.log | grep -o '[0-9.]*[KMGT]B' | tail -1 || echo "unknown")
        fi

        # Save results
        echo "${IMAGE_DIGEST}" > $(results.IMAGE_DIGEST.path)
        echo "${IMAGE}" > $(results.IMAGE_URL.path)
        echo "${IMAGE_SIZE}" > $(results.IMAGE_SIZE.path)

        echo "Build completed successfully"
        echo "Image: ${IMAGE}"
        echo "Digest: ${IMAGE_DIGEST}"
        echo "Size: ${IMAGE_SIZE}"
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      resources:
        requests:
          memory: "1Gi"
          cpu: "500m"
        limits:
          memory: "4Gi"
          cpu: "2000m"
      volumeMounts:
        - name: kaniko-cache
          mountPath: /cache

  volumes:
    - name: kaniko-cache
      emptyDir:
        sizeLimit: 5Gi
