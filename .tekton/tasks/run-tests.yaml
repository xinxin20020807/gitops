apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: run-tests
  labels:
    app.kubernetes.io/version: "1.0.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.38.0"
    tekton.dev/categories: Test
    tekton.dev/tags: "test,unit-test,coverage"
    tekton.dev/displayName: "Run Tests"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >
    Run tests for various project types with coverage reporting.
    Supports Maven, Gradle, npm, Go, and Python projects.

  params:
    - name: project-type
      description: "Project type: maven, gradle, npm, go, python"
      type: string
      default: "maven"
    - name: test-command
      description: "Test command to run"
      type: string
      default: "test"
    - name: coverage-enabled
      description: "Enable code coverage reporting"
      type: string
      default: "true"
    - name: fail-fast
      description: "Fail on first test failure"
      type: string
      default: "true"
    - name: test-image
      description: "Container image for running tests"
      type: string
      default: "maven:3.9-openjdk-17"

  workspaces:
    - name: source
      description: "Workspace containing the source code"

  results:
    - name: test-status
      description: "Test execution status (PASSED/FAILED)"
    - name: coverage-percentage
      description: "Code coverage percentage"
    - name: test-count
      description: "Number of tests executed"

  steps:
    - name: run-tests
      image: $(params.test-image)
      env:
        - name: PROJECT_TYPE
          value: $(params.project-type)
        - name: TEST_COMMAND
          value: $(params.test-command)
        - name: COVERAGE_ENABLED
          value: $(params.coverage-enabled)
        - name: FAIL_FAST
          value: $(params.fail-fast)
        - name: WORKSPACE_SOURCE_PATH
          value: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e

        cd "${WORKSPACE_SOURCE_PATH}"

        echo "Running tests for project type: ${PROJECT_TYPE}"
        echo "Test command: ${TEST_COMMAND}"
        echo "Working directory: $(pwd)"

        # Initialize results
        TEST_STATUS="UNKNOWN"
        COVERAGE_PCT="0"
        TEST_COUNT="0"

        case "${PROJECT_TYPE}" in
          "maven")
            echo "=== Running Maven Tests ==="

            # Use Maven wrapper if available
            MVN_CMD="mvn"
            if [ -f "./mvnw" ]; then
              MVN_CMD="./mvnw"
              chmod +x ./mvnw
            fi

            # Configure Maven options
            MAVEN_OPTS="-B -V"
            if [ "${FAIL_FAST}" = "false" ]; then
              MAVEN_OPTS="${MAVEN_OPTS} -Dmaven.test.failure.ignore=true"
            fi

            if [ "${COVERAGE_ENABLED}" = "true" ]; then
              echo "Running tests with coverage..."
              ${MVN_CMD} ${MAVEN_OPTS} clean test jacoco:report || TEST_STATUS="FAILED"

              # Extract coverage
              if [ -f "target/site/jacoco/index.html" ]; then
                COVERAGE_PCT=$(grep -o 'Total[^%]*%' target/site/jacoco/index.html | grep -o '[0-9]*' | head -1 || echo "0")
              fi
            else
              ${MVN_CMD} ${MAVEN_OPTS} clean ${TEST_COMMAND} || TEST_STATUS="FAILED"
            fi

            # Extract test count
            if ls target/surefire-reports/TEST-*.xml 1> /dev/null 2>&1; then
              TEST_COUNT=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h "tests=" {} \; | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}' || echo "0")
            fi
            ;;

          "gradle")
            echo "=== Running Gradle Tests ==="

            # Use Gradle wrapper if available
            GRADLE_CMD="gradle"
            if [ -f "./gradlew" ]; then
              GRADLE_CMD="./gradlew"
              chmod +x ./gradlew
            fi

            if [ "${COVERAGE_ENABLED}" = "true" ]; then
              echo "Running tests with coverage..."
              ${GRADLE_CMD} clean test jacocoTestReport || TEST_STATUS="FAILED"

              # Extract coverage
              if [ -f "build/reports/jacoco/test/html/index.html" ]; then
                COVERAGE_PCT=$(grep -o 'Total[^%]*%' build/reports/jacoco/test/html/index.html | grep -o '[0-9]*' | head -1 || echo "0")
              fi
            else
              ${GRADLE_CMD} clean ${TEST_COMMAND} || TEST_STATUS="FAILED"
            fi
            ;;

          "npm")
            echo "=== Running npm Tests ==="

            # Install dependencies
            npm ci

            if [ "${COVERAGE_ENABLED}" = "true" ]; then
              npm run test:coverage || TEST_STATUS="FAILED"
            else
              npm run ${TEST_COMMAND} || TEST_STATUS="FAILED"
            fi
            ;;

          "go")
            echo "=== Running Go Tests ==="

            go mod download

            if [ "${COVERAGE_ENABLED}" = "true" ]; then
              go test -v -race -coverprofile=coverage.out ./... || TEST_STATUS="FAILED"
              if [ -f "coverage.out" ]; then
                COVERAGE_PCT=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | tr -d '%' | cut -d'.' -f1 || echo "0")
              fi
            else
              go test -v ./... || TEST_STATUS="FAILED"
            fi
            ;;

          "python")
            echo "=== Running Python Tests ==="

            # Install dependencies
            if [ -f "requirements.txt" ]; then
              pip install -r requirements.txt
            fi

            if [ "${COVERAGE_ENABLED}" = "true" ]; then
              python -m pytest --cov=. --cov-report=html || TEST_STATUS="FAILED"
              if [ -f "htmlcov/index.html" ]; then
                COVERAGE_PCT=$(grep -o 'pc_cov">[0-9]*%' htmlcov/index.html | head -1 | grep -o '[0-9]*' || echo "0")
              fi
            else
              python -m pytest || TEST_STATUS="FAILED"
            fi
            ;;

          *)
            echo "Unsupported project type: ${PROJECT_TYPE}"
            echo "Supported types: maven, gradle, npm, go, python"
            exit 1
            ;;
        esac

        # Set test status if not already failed
        if [ "${TEST_STATUS}" != "FAILED" ]; then
          TEST_STATUS="PASSED"
        fi

        # Output results
        echo "Test Status: ${TEST_STATUS}"
        echo "Coverage: ${COVERAGE_PCT}%"
        echo "Test Count: ${TEST_COUNT}"

        # Save results
        echo "${TEST_STATUS}" > $(results.test-status.path)
        echo "${COVERAGE_PCT}" > $(results.coverage-percentage.path)
        echo "${TEST_COUNT}" > $(results.test-count.path)

        # Fail if tests failed and fail-fast is enabled
        if [ "${TEST_STATUS}" = "FAILED" ] && [ "${FAIL_FAST}" = "true" ]; then
          echo "Tests failed. Exiting with error."
          exit 1
        fi

        echo "Test execution completed"
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
      resources:
        requests:
          memory: "512Mi"
          cpu: "500m"
        limits:
          memory: "2Gi"
          cpu: "1000m"
