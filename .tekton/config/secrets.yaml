# Secrets Configuration for Tekton GitOps CI/CD
# This file contains templates for all required secrets
# Replace placeholder values with actual credentials before applying

---
# Docker Registry Credentials
apiVersion: v1
kind: Secret
metadata:
  name: docker-credentials
  namespace: tekton-pipelines
  labels:
    app.kubernetes.io/name: tekton-pipelines
    app.kubernetes.io/component: credentials
  annotations:
    description: "Docker registry credentials for image push/pull"
type: kubernetes.io/dockerconfigjson
data:Ã¥
  # Replace with base64 encoded Docker config.json
  # Example: echo '{"auths":{"docker.io":{"username":"your-username","password":"your-password","auth":"base64-encoded-username:password"}}}' | base64 -w 0
  # echo -n "2463217813@qq.com:111qqq..." | base64
  .dockerconfigjson: eyJhdXRocyI6eyJ1aHViLnNlcnZpY2UudWNsb3VkLmNuIjp7InVzZXJuYW1lIjoiMjQ2MzIxNzgxM0BxcS5jb20iLCJwYXNzd29yZCI6IjExMXFxcS4uLiIsImF1dGgiOiJNalEyTXpJeE56Z3hNMEJ4Y1M1amIyMDZNVEV4Y1hGeExpNHUifX19Cg==

---
# Git Credentials for Private Repositories
apiVersion: v1
kind: Secret
metadata:
  name: git-credentials
  namespace: tekton-pipelines
  labels:
    app.kubernetes.io/name: tekton-pipelines
    app.kubernetes.io/component: credentials
  annotations:
    description: "Git credentials for private repository access"
    tekton.dev/git-0: https://github.com  # Git provider URL
type: kubernetes.io/ssh-auth
data:
  # SSH private key for Git authentication (base64 encoded)
  # Generate: ssh-keygen -t rsa -b 4096 -C "tekton@your-domain.com"
  # Encode: cat ~/.ssh/id_rsa | base64 -w 0
  ssh-privatekey: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUEwQmVMT2Z3N0FoZFgvTWJXMjRHWnp4SVlHQWNEYlorVXlVb0NtQWdyTlFQdXQ3ejRFNFdNCkNOYVNhazZMNzhqbjJId3Z0TytvYXIwMHlJNnR3enhBbldTblprZWJBTlV5cXdHUW03UHVidGQ4TlppZ29DVTg2MU5DWXEKeWQ4d0hNY0JXNk5JQ3NZa0ZVL3R0N3dUN2wvU29tWGFnS1BBaUxKUkE4QjhNK3ErRkpoSTFKaVU4SFpLb3dzeS9uakd3egpJMWp2UVRxS0RYWmNLUmRjNEY1QUp5NSthWEx5QWZVSXFyZ2Y3SXFVazYrVnZaL0lSUG9NUmp4T2RheGllRUxOeHdPN2VBCi9pU0dVbktlRlR6VnhyZjY5aHJhRFN4eFhzcUN2ZnV1TkwwWk5OT2JMcUh4bE5hbWp4VzAzVDZPT3BtMXlTMFRyYUgxakcKZXdjb0hRQ0o3ZVQ3TTBZdGdRWnl4bFZFdllTN2t2TnkxenNsUW9CMlQxb2JrbGhoMXc3MEtVVU9yb0x2SEZOenQweDZWRQpQc1FQMThCWnZ1SU1pazlzWW5WZGI4NE5ITXdvSjZoQWVjVjU0bXVEVzIyd1JlRkVkZHYxcCtCQUN1NGdUZ0dOd1hvNXYzCkFJVnpDQjhXclhKNndCQSs5V3NaOEExMmNwYjFVRnd0MHg1NmNzUFpBQUFGa0pPZExNeVRuU3pNQUFBQUIzTnphQzF5YzIKRUFBQUdCQU5BWGl6bjhPd0lYVi96RzF0dUJtYzhTR0JnSEEyMmZsTWxLQXBnSUt6VUQ3cmU4K0JPRmpBaldrbXBPaSsvSQo1OWg4TDdUdnFHcTlOTWlPcmNNOFFKMWtwMlpIbXdEVk1xc0JrSnV6N203WGZEV1lvS0FsUE90VFFtS3NuZk1CekhBVnVqClNBckdKQlZQN2JlOEUrNWYwcUpsMm9DandJaXlVUVBBZkRQcXZoU1lTTlNZbFBCMlNxTUxNdjU0eHNNeU5ZNzBFNmlnMTIKWENrWFhPQmVRQ2N1Zm1seThnSDFDS3E0SCt5S2xKT3ZsYjJmeUVUNkRFWThUbldzWW5oQ3pjY0R1M2dQNGtobEp5bmhVOAoxY2EzK3ZZYTJnMHNjVjdLZ3IzN3JqUzlHVFRUbXk2aDhaVFdwbzhWdE4wK2pqcVp0Y2t0RTYyaDlZeG5zSEtCMEFpZTNrCit6TkdMWUVHY3NaVlJMMkV1NUx6Y3RjN0pVS0FkazlhRzVKWVlkY085Q2xGRHE2Qzd4eFRjN2RNZWxSRDdFRDlmQVdiN2kKRElwUGJHSjFYVy9PRFJ6TUtDZW9RSG5GZWVKcmcxdHRzRVhoUkhYYjlhZmdRQXJ1SUU0QmpjRjZPYjl3Q0Zjd2dmRnExeQplc0FRUHZWckdmQU5kbktXOVZCY0xkTWVlbkxEMlFBQUFBTUJBQUVBQUFHQU9oZllqbitVR2FsYXJ2N3p6S1FKeEgxUXJLClNJbUhvTWw0Vko1QmVqdUZFNHU2TE52dVZ4aXFZY2lnRVRvQVYrZERsM09CUVArSHlKMTlPOVB0djdUZlZqcG5Jbkc3eHAKUU1SWEVxRFExN0RneERXdjRnV0RWRThTSVduL1RuQWFHdEIyQTJKSXZjVnZiUmJwSGJIcGt4dkpTaXczYnpzVFhXMkMxTQpmMUh4YnQ1MHRxVkNMejlXNXQyaGh0bEE1QTJJVmpoZHBKNENoQzRsWGJYK2Z3RVFBeDJrNTBzWWN1dkRwYTd6Wmc5RG40Cm04K1hvV29OTXk1eTJQY2ZKbU8vZmErYm52dFVDMS8rTjZlcDZSY2NRZHIvY295T3c2UWdpNGJIMVNEN1hzTW16ZlpGRm4KaFJzTUVWaTZ2TnA1V0c1NENrNEhHNjdHeG9BTVg0R0tSakczL1pNUmpXK00xc0lsV0w5aDV5UVEvdXdRZFNBSElCKzNUWQpxS2RPSmptQUd0dWQ4SXVkclg4QitSUGVRVEZ5bXV6SXEyK1Z1WHQycEdUc1ZrVEFGdzJoNkZCa0hWdkdsdTRVQ01lOHEyCnJpUXQvd1RLWTkxbDN6dk9WQTJ6Nng3RGtFWnhYbk1YZ0xjVkVSTlltaHRsOUxDTFh4SHN1YjAwTlNxQ2ozNWJ4aEFBQUEKd1FDZU1OSEh4cStaZnZYZWhyZWxoY2xPeHBKNkNHcGxsSGQ0c3dqckxoajNlN2dqOC84QktqR1ozSTRUbit2dkQzSjZxQgpPR0d4aTAyQlM1Q2xQdXNSb1IzOXNRRnArS0VFSUQ0eVF2ZGhxVzVPSXQzdVQ5R3YyWEZBb0NadjQyNHdlcjlucUEyRlg2CnV4Y3QvS0puUkdsWTgrRkFoNnlJTG95VFhLSFEvVFpaNWJ4SERyaUJ3MTJpN05OREhhNmRVRnBEeUJraWEzbnFJelZJRXkKR082RWtsdzFFcEJUL3cvREpyMjl2Z2FjMUVyUlQ5d1R2NGdjcFEvOVBld2pZVXE5Y0FBQURCQVBodUJNa05ocUxveU9pTwpDWmQvNmVMTE44THNibnpPTHo4ME9DM0RaTUQ3azJuL1oyYllRN3ExNXdQalVPZ0pXcVJjVFRaaVliRjRnL2VoamNjSFFVCm1IcG9SczRsWFdYdGRlc2k2Wmhtd0hqRzdoOGNSUXBpMTkweXFOeEhGMXF6VVZ3LzRVTklqMlJQSEM4SkIvMkRYOERreloKdnltUXdpSy80V3lmOTZZQzFCRFRlNU1MMldjRU1oN3FmU2gzYXp0dWlwU3lGeVFkZEpXR3FpTTA4Q0lQbXhRd2cvUnhJUQpTbmVOZEU3b1NPeFlldTdiOUlpcFpJeWE4Tm9pUWRMd0FBQU1FQTFtN2FhVW1COG5FbTlwVEFTeDEzaG1iLytZbEhFbUlaCk5BZlduejg4N0pIVHcrQjNkYkFUdnVKTk5wbUJ1WUVkcEdYWmRWMjloU3NWY1MzMVA0WU1UMEJHQVlxMmZrdW9RT0NvSEYKK2Q3cFlvcVMvYW5rR3dZS3h0bW4vYmpuWHZyZFlSR0daNFo4RkRCL0kxWjhJQ29hNXUxb2U4Y0czekxFcitBTFRjVWNtVgp4VDJLcTVXQituK2IyVVRoY21xNmRrL0UvNVVkSjg5aXF4RGhOMTNEWkwxRVRaS2lvZlpRYTlZTnkxQ2tTQm44d3N6OWZ4ClBXVUd0S2RXU3ZXejEzQUFBQUdtMWhZMEJ0WVdOa1pVMWhZMEp2YjJzdFVISnZMbXh2WTJGcwotLS0tLUVORCBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0K
